{"version":3,"file":"static/js/736.976a5b35.chunk.js","mappings":"8RAEaA,EAAOC,EAAAA,EAAAA,IAAH,qHAOJC,EAAYD,EAAAA,EAAAA,GAAH,+CAITE,EAAWF,EAAAA,EAAAA,GAAH,yHAQRG,EAAeH,EAAAA,EAAAA,GAAH,2GAMZI,EAAWJ,EAAAA,EAAAA,IAAH,6CAIRK,EAAWL,EAAAA,EAAAA,GAAH,gDAIRM,EAAaN,EAAAA,EAAAA,EAAH,oE,SC6BvB,EAnDa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAeP,GAFxB,gBAENG,EAFM,EAENA,KACRC,EAAQD,GAHM,gDAKdK,QAAQC,IAAR,MALc,yDAAH,qDASfH,GACD,GAAE,CAACN,KAGF,UAACR,EAAD,YACE,SAACE,EAAD,UAAW,SACVS,EAAKO,QACJ,SAACf,EAAD,UACGQ,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACnB,EAAD,WACGiB,GACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAG,UAAKH,EAAL,eAGL,gBACEE,IAAG,oDACHC,IAAG,UAAKH,EAAL,eAGP,UAACjB,EAAD,YACE,SAACC,EAAD,UAAWgB,KACX,yBAAG,cAAYC,UAdAH,EADX,OAqBZ,SAACb,EAAD,UAAY,wDAMnB,C,mMC5DKmB,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,uBACtBG,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qDAQhBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CK,EAD/C,gCADO,uBACtBF,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,sDAQhBG,EAAc,mCAAG,WAAMzB,GAAN,yFACLqB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAlB,EADA,oBACmBmB,EADnB,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdf,EAAc,mCAAG,WAAMP,GAAN,yFACLqB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAlB,EADA,4BAC2BmB,EAD3B,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdI,EAAiB,mCAAG,WAAM1B,GAAN,yFACRqB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAlB,EADA,4BAC2BmB,EAD3B,2BADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrap = styled.div`\n  margin-top: 30px;\n  padding-right: 80px;\n  padding-left: 80px;\n  padding-bottom: 40px;\n`;\n\nexport const CastTitle = styled.h3`\n  text-align: center;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  margin-top: 30px;\n  align-items: center;\n`;\n\nexport const CastListItem = styled.li`\n  width: calc((100% - 4 * 40px) / 5);\n  height: 400px;\n  word-wrap: break-word;\n`;\n\nexport const CastInfo = styled.div`\n  margin-top: 20px;\n`;\n\nexport const CastName = styled.h4`\n  margin-bottom: 10px;\n`;\n\nexport const NoCastText = styled.p`\n  margin-top: 20px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport {\n  Wrap,\n  CastTitle,\n  CastList,\n  CastListItem,\n  CastInfo,\n  CastName,\n  NoCastText,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Wrap>\n      <CastTitle>Cast</CastTitle>\n      {cast.length ? (\n        <CastList>\n          {cast.map(({ id, profile_path, name, character }) => (\n            <CastListItem key={id}>\n              {profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                  alt={`${name} profile`}\n                />\n              ) : (\n                <img\n                  src={`https://via.placeholder.com/200x300?text=No+Image`}\n                  alt={`${name} profile`}\n                />\n              )}\n              <CastInfo>\n                <CastName>{name}</CastName>\n                <p>Character: {character}</p>\n              </CastInfo>\n            </CastListItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoCastText>\n          We don't have any information about the cast yet.\n        </NoCastText>\n      )}\n    </Wrap>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '404ca53f902a08bf3140e0fd0ad0a560';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};"],"names":["Wrap","styled","CastTitle","CastList","CastListItem","CastInfo","CastName","NoCastText","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","fetchMovieCast","console","log","length","map","id","profile_path","name","character","src","alt","BASE_URL","API_KEY","fetchTrendMovies","axios","data","fetchMovieByName","query","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}