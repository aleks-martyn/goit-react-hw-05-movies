{"version":3,"file":"static/js/93.2619d515.chunk.js","mappings":"sSAEaA,EAAOC,EAAAA,EAAAA,IAAH,qHAOJC,EAAYD,EAAAA,EAAAA,GAAH,+CAITE,EAAWF,EAAAA,EAAAA,GAAH,yHAQRG,EAAeH,EAAAA,EAAAA,GAAH,2GAMZI,EAAWJ,EAAAA,EAAAA,IAAH,6CAIRK,EAAWL,EAAAA,EAAAA,GAAH,gDAIRM,EAAaN,EAAAA,EAAAA,EAAH,oE,SCwCvB,EA7Da,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,WAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,WAAMV,GAAN,mGAESW,EAAAA,EAAAA,IAAeX,GAFxB,gBAENG,EAFM,EAENA,KACRC,EAAQD,GACRG,EAAU,YAJI,gDAMdE,EAAS,EAAD,IACRF,EAAU,YAPI,yDAAH,sDAWfI,EAAUV,EACX,GAAE,CAACA,KAGF,gCACc,YAAXK,IAAwB,SAAC,IAAD,IACb,aAAXA,IAAyB,wBAAKE,EAAMK,UACzB,aAAXP,IACC,UAACb,EAAD,YACE,SAACE,EAAD,UAAW,SACVS,EAAKU,QACJ,SAAClB,EAAD,UACGQ,EAAKW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACtB,EAAD,WACGoB,GACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAG,UAAKH,MAGV,gBACEE,IAAG,oDACHC,IAAG,UAAKH,MAGZ,UAACpB,EAAD,YACE,SAACC,EAAD,UAAWmB,KACX,yBAAG,cAAYC,UAdAH,EADX,OAqBZ,SAAChB,EAAD,UAAY,2DAQvB,C,mMCvEKsB,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,uBACtBG,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qDAQhBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CK,EAD/C,gCADO,uBACtBF,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,sDAQhBG,EAAc,mCAAG,WAAM5B,GAAN,yFACLwB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACArB,EADA,oBACmBsB,EADnB,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdd,EAAc,mCAAG,WAAMX,GAAN,yFACLwB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACArB,EADA,4BAC2BsB,EAD3B,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdI,EAAiB,mCAAG,WAAM7B,GAAN,yFACRwB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACArB,EADA,4BAC2BsB,EAD3B,2BADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrap = styled.div`\n  margin-top: 30px;\n  padding-right: 80px;\n  padding-left: 80px;\n  padding-bottom: 40px;\n`;\n\nexport const CastTitle = styled.h3`\n  text-align: center;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  margin-top: 30px;\n  align-items: center;\n`;\n\nexport const CastListItem = styled.li`\n  width: calc((100% - 4 * 40px) / 5);\n  height: 350px;\n  word-wrap: break-word;\n`;\n\nexport const CastInfo = styled.div`\n  margin-top: 20px;\n`;\n\nexport const CastName = styled.h4`\n  margin-bottom: 10px;\n`;\n\nexport const NoCastText = styled.p`\n  margin-top: 20px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport Spinner from 'components/Loader';\nimport {\n  Wrap,\n  CastTitle,\n  CastList,\n  CastListItem,\n  CastInfo,\n  CastName,\n  NoCastText,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState('pending');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async movieId => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error);\n        setStatus('rejected');\n      }\n    };\n\n    fetchCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Spinner />}\n      {status === 'rejected' && <h3>{error.message}</h3>}\n      {status === 'resolved' && (\n        <Wrap>\n          <CastTitle>Cast</CastTitle>\n          {cast.length ? (\n            <CastList>\n              {cast.map(({ id, profile_path, name, character }) => (\n                <CastListItem key={id}>\n                  {profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w185${profile_path}`}\n                      alt={`${name}`}\n                    />\n                  ) : (\n                    <img\n                      src={`https://via.placeholder.com/185x278?text=No+Image`}\n                      alt={`${name}`}\n                    />\n                  )}\n                  <CastInfo>\n                    <CastName>{name}</CastName>\n                    <p>Character: {character}</p>\n                  </CastInfo>\n                </CastListItem>\n              ))}\n            </CastList>\n          ) : (\n            <NoCastText>\n              We don't have any information about the cast yet.\n            </NoCastText>\n          )}\n        </Wrap>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '404ca53f902a08bf3140e0fd0ad0a560';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};"],"names":["Wrap","styled","CastTitle","CastList","CastListItem","CastInfo","CastName","NoCastText","movieId","useParams","useState","cast","setCast","status","setStatus","error","setError","useEffect","fetchCast","fetchMovieCast","message","length","map","id","profile_path","name","character","src","alt","BASE_URL","API_KEY","fetchTrendMovies","axios","data","fetchMovieByName","query","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}